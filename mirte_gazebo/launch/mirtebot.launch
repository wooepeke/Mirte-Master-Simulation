<launch>
    <arg name="initial_pose_x" default="0"/>
    <arg name="initial_pose_y" default="0"/>
    <arg name="initial_pose_z" default="0"/>
    <arg name="initial_pose_yaw" default="0"/>
    <arg name="frame" default="mirtebot"/>
    <arg name="id" default="0"/>
    <arg name="move_forward_only" default="true"/>


    <arg name="uid" value="$(arg frame)_$(arg id)"/>    
    
    <arg name="cmd_vel_topic" default="$(arg uid)/mobile_base_controller/cmd_vel" />
    <arg name="odom_topic" default="odom" />

    <!-- Initial position of the robot, can be anything -->
    <arg name="init_pose" value="-x $(arg initial_pose_x) -y $(arg initial_pose_y) -z $(arg initial_pose_z) -Y $(arg initial_pose_yaw)" />
  
    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find mirte_description)/urdf/mirtebot.xacro' robot_tf_prefix:=$(arg uid)"/>

    <!-- Gazebo model spawner -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
      args="$(arg init_pose) -urdf -model $(arg uid) -param robot_description " respawn="false" output="screen">
    </node>

    <!-- Loads controller data, make sure to set the frame params correctly -->
    <rosparam command="load" file="$(find mirte_description)/config/control_skiddiff.yaml"/>
    <param name="mobile_base_controller/odom_frame_id" type="string" value="$(arg uid)/odom"/>
    <param name="mobile_base_controller/base_frame_id" type="string" value="$(arg uid)/base_link"/>

    <!-- Publishes the state of a certain mirtebot -->
    <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg uid)" />
    </node>

    <!-- Spawn a controller node for a certain mirtebot, make sure to remap the frame ids -->
    <node name="controller_spawner" output="screen" pkg="controller_manager"  type="spawner" args="joint_state_controller mobile_base_controller">
        <param name="base_frame_id" value="$(arg uid)/base_link" />
        <param name="odom_frame_id" value="$(arg uid)/odom" />
    </node>

    <!-- Local and global costmaps with movebase navigation points -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">     
        <!-- <param name="base_global_planner" value="full_coverage_path_planner/BoustrophedonSTC"/>  -->
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>
        
        <rosparam file="$(find mirte_2dnav)/config/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
        <rosparam file="$(find mirte_2dnav)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find mirte_2dnav)/config/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find mirte_2dnav)/config/global_costmap_params.yaml" command="load" /> 
        <rosparam file="$(find mirte_2dnav)/config/base_local_planner_params.yaml" command="load" />
        
        <param name="global_costmap/robot_base_frame" value="$(arg uid)/base_link" />
        <param name="global_costmap/laser_scan_sensor/sensor_frame" value="$(arg uid)/lidar_link" />
        <param name="global_costmap/obstacle_layer/laser_scan_sensor/sensor_frame" value="$(arg uid)/lidar_link" />
        <param name="global_costmap/laser_scan_sensor/topic" value="/$(arg uid)/scan" />
        
        <param name="local_costmap/global_frame" value="$(arg uid)/odom" />
        <param name="local_costmap/robot_base_frame" value="$(arg uid)/base_link" />
        <param name="local_costmap/laser_scan_sensor/sensor_frame" value="$(arg uid)/lidar_link" />
        <param name="local_costmap/obstacle_layer/laser_scan_sensor/sensor_frame" value="$(arg uid)/lidar_link" />
        <param name="local_costmap/laser_scan_sensor/topic" value="/$(arg uid)/scan" />

        <rosparam file="$(find mirte_2dnav)/config/dwa_local_planner_params.yaml" command="load"/>
        <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)"/>

        <remap from="cmd_vel" to="mobile_base_controller/cmd_vel" />
        <remap from="map" to="/map"/>

    </node>

  <include file="$(find mirte_gazebo)/launch/slam_toolbox.launch">
      <arg name="uid" value="$(arg frame)_$(arg id)"/>
      <arg name="x_pos" value="$(arg initial_pose_x)"/>
      <arg name="y_pos" value="$(arg initial_pose_y)"/>
  </include>

  <!-- <include file="$(find mirte_gazebo)/launch/amcl.launch">
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_yaw)"/>
    <arg name="odom_frame_id" value="$(arg uid)/odom"/>
    <arg name="base_frame_id" value="$(arg uid)/base_link"/>
    <arg name="scan_topic"    value="/$(arg uid)/scan"/>
  </include> -->

  <!-- ########################## Global path planning startup ########################## -->
  <node name="interpolator" pkg="tracking_pid" type="path_interpolator">
      <param name="target_x_vel" value="0.25"/>
      <param name="target_yaw_vel" value="0.5"/>
      <remap from="path" to="waypoints"/>
  </node>

  <!--Tracking_pid tries to get the robot as close to it's goal point as possible-->
  <node name="pid_controller" pkg="tracking_pid" type="controller" output="screen">
      <remap from="move_base/cmd_vel" to="mobile_base_controller/cmd_vel"/>
      <remap from="local_trajectory" to="trajectory"/>
      <param name="controller_debug_enabled" value="True"/>
      <param name="track_base_link" value="true"/>
      <param name="base_link_frame" value="$(arg uid)/base_link"/>

      <param name="l" value="0.5"/>
      <param name="Ki_long" value="0.0"/>
      <param name="Kp_long" value="2.0"/>
      <param name="Kd_long" value="0.5"/>
      <param name="Ki_lat" value="0.0"/>
      <param name="Kp_lat" value="4.0"/>
      <param name="Kd_lat" value="0.3"/>
  </node>
  
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_$(arg uid)_cov_map_tf_broadcaster"
        args="0 0 0 0 0 0 map $(arg uid)/coverage_grid"/>

  <include file="$(find full_coverage_path_planner)/launch/coverage_progress.launch">
      <arg name="coverage_frame" value="$(arg uid)/base_link"/>
      <arg name="map_frame" value="$(arg uid)/coverage_grid"/>
  </include>

</launch>
