// Generated by gencpp from file mirte_msgs/get_virtual_colorResponse.msg
// DO NOT EDIT!


#ifndef MIRTE_MSGS_MESSAGE_GET_VIRTUAL_COLORRESPONSE_H
#define MIRTE_MSGS_MESSAGE_GET_VIRTUAL_COLORRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mirte_msgs/color.h>

namespace mirte_msgs
{
template <class ContainerAllocator>
struct get_virtual_colorResponse_
{
  typedef get_virtual_colorResponse_<ContainerAllocator> Type;

  get_virtual_colorResponse_()
    : data()  {
    }
  get_virtual_colorResponse_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mirte_msgs::color_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> const> ConstPtr;

}; // struct get_virtual_colorResponse_

typedef ::mirte_msgs::get_virtual_colorResponse_<std::allocator<void> > get_virtual_colorResponse;

typedef boost::shared_ptr< ::mirte_msgs::get_virtual_colorResponse > get_virtual_colorResponsePtr;
typedef boost::shared_ptr< ::mirte_msgs::get_virtual_colorResponse const> get_virtual_colorResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator1> & lhs, const ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator1> & lhs, const ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mirte_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f4914cb5eb412d500cdee0301977e80";
  }

  static const char* value(const ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f4914cb5eb412d5ULL;
  static const uint64_t static_value2 = 0x00cdee0301977e80ULL;
};

template<class ContainerAllocator>
struct DataType< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mirte_msgs/get_virtual_colorResponse";
  }

  static const char* value(const ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mirte_msgs/color data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: mirte_msgs/color\n"
"int32 red\n"
"int32 green\n"
"int32 blue\n"
;
  }

  static const char* value(const ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct get_virtual_colorResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mirte_msgs::get_virtual_colorResponse_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    s << std::endl;
    Printer< ::mirte_msgs::color_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIRTE_MSGS_MESSAGE_GET_VIRTUAL_COLORRESPONSE_H
