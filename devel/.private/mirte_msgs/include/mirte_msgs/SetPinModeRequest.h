// Generated by gencpp from file mirte_msgs/SetPinModeRequest.msg
// DO NOT EDIT!


#ifndef MIRTE_MSGS_MESSAGE_SETPINMODEREQUEST_H
#define MIRTE_MSGS_MESSAGE_SETPINMODEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mirte_msgs
{
template <class ContainerAllocator>
struct SetPinModeRequest_
{
  typedef SetPinModeRequest_<ContainerAllocator> Type;

  SetPinModeRequest_()
    : pin(0)
    , mode(0)
    , type(0)  {
    }
  SetPinModeRequest_(const ContainerAllocator& _alloc)
    : pin(0)
    , mode(0)
    , type(0)  {
  (void)_alloc;
    }



   typedef int32_t _pin_type;
  _pin_type pin;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef int32_t _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetPinModeRequest_

typedef ::mirte_msgs::SetPinModeRequest_<std::allocator<void> > SetPinModeRequest;

typedef boost::shared_ptr< ::mirte_msgs::SetPinModeRequest > SetPinModeRequestPtr;
typedef boost::shared_ptr< ::mirte_msgs::SetPinModeRequest const> SetPinModeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mirte_msgs::SetPinModeRequest_<ContainerAllocator1> & lhs, const ::mirte_msgs::SetPinModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pin == rhs.pin &&
    lhs.mode == rhs.mode &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mirte_msgs::SetPinModeRequest_<ContainerAllocator1> & lhs, const ::mirte_msgs::SetPinModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mirte_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50d1c2f0badffa1cc48f5ed04e68dc51";
  }

  static const char* value(const ::mirte_msgs::SetPinModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50d1c2f0badffa1cULL;
  static const uint64_t static_value2 = 0xc48f5ed04e68dc51ULL;
};

template<class ContainerAllocator>
struct DataType< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mirte_msgs/SetPinModeRequest";
  }

  static const char* value(const ::mirte_msgs::SetPinModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 pin\n"
"int32 mode\n"
"int32 type\n"
;
  }

  static const char* value(const ::mirte_msgs::SetPinModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pin);
      stream.next(m.mode);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPinModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mirte_msgs::SetPinModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mirte_msgs::SetPinModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "pin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pin);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIRTE_MSGS_MESSAGE_SETPINMODEREQUEST_H
